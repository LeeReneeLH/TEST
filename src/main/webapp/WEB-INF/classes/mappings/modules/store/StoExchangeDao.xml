<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coffer.businesses.modules.store.v01.dao.StoExchangeDao">
	<sql id="stoExchangeColumns">
		a.excheng_id AS "exchengId",
		min(a.detail_id) AS "detailId",
		min(a.change_goods_id) AS "changeGoods.goodsID",
		min(a.change_goods_num) AS "changeGoodsNum",
		sum(a.amount) AS "amount",
		min(a.office_id) AS "office.id",
		min(a.create_by) AS "createBy.id",
		min(a.create_name) AS "createName",
		min(a.create_date) AS "createDate",
		min(a.remarks) AS "remarks",
		min(o1.goods_name) AS "changeGoods.goodsName",
		min(o3.name) AS "office.name"
	</sql>
	
	<sql id="stoExchangeJoins">
		LEFT JOIN sto_goods o1 ON o1.goods_id = a.change_goods_id
		LEFT JOIN sto_goods o2 ON o2.goods_id = a.to_goods_id
		LEFT JOIN sys_office o3 ON o3.id = a.office_id
	</sql>
	
	<select id="get" resultType="StoExchange">
		SELECT 
			<include refid="stoExchangeColumns"/>
		FROM sto_goods_exchange a
		<include refid="stoExchangeJoins"/>
		WHERE a.excheng_id = #{exchengId}
		GROUP　BY a.excheng_id
	</select>
	
	<select id="findList" resultType="StoExchange">
		SELECT 
			<include refid="stoExchangeColumns"/>
		FROM sto_goods_exchange a
		<include refid="stoExchangeJoins"/>
		<where>
			'1' = '1'
			<if test="exchengId != null and exchengId != '' ">
				and a.excheng_id like 
				<!-- '%' || #{exchengId} || '%' -->
				<if test="dbName == 'oracle'">'%' || #{exchengId} || '%'</if>
				<if test="dbName == 'mysql'"> CONCAT('%', #{exchengId}, '%')</if>
			</if>
			<if test="changeGoods !=null and changeGoods.goodsID != null and changeGoods.goodsID != '' ">
				and a.change_goods_id like 
				<!-- '%' || #{changeGoods.goodsID} || '%' -->
				<if test="dbName == 'oracle'">'%' || #{changeGoods.goodsID} || '%'</if>
				<if test="dbName == 'mysql'"> CONCAT('%', #{changeGoods.goodsID}, '%')</if>
			</if>
			<if test="office !=null and office.id != null and office.id != '' ">
				and a.office_id = #{office.id}
			</if>
			<if test="createUser != null and createUser != '' ">
				and a.create_by = #{createUser}
			</if>
			<if test="searchTimeStart != null and searchTimeStart != '' ">
				<!-- and TO_CHAR(a.create_date, 'yyyy-mm-dd hh24:mi:ss') &gt;= #{searchTimeStart} -->
				<if test="dbName == 'oracle'">AND TO_CHAR(a.create_date, 'yyyy-mm-dd hh24:mi:ss') &gt;= #{searchTimeStart}</if>
				<if test="dbName == 'mysql'">AND date_format(a.create_date,'%Y-%m-%d %H:%i:%S') &gt;= #{searchTimeStart}</if>
			</if>
			<if test="searchTimeEnd != null and searchTimeEnd != '' ">
				<!-- and TO_CHAR(a.create_date, 'yyyy-mm-dd hh24:mi:ss') &lt;= #{searchTimeEnd} -->
				<if test="dbName == 'oracle'">AND TO_CHAR(a.create_date, 'yyyy-mm-dd hh24:mi:ss') &lt;= #{searchTimeEnd}</if>
				<if test="dbName == 'mysql'">AND date_format(a.create_date,'%Y-%m-%d %H:%i:%S') &gt;= #{searchTimeEnd}</if>
			</if>
			<!-- 数据范围过滤 -->
			${sqlMap.dsf}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				GROUP　BY a.excheng_id
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				GROUP　BY a.excheng_id
				ORDER BY min(a.create_date) DESC
			</otherwise>
		</choose>
	</select>
	
		<insert id="insert">
		INSERT INTO sto_goods_exchange(
			excheng_id,
			detail_id,
			change_goods_id,
			change_goods_num,
			to_goods_id,
			to_goods_num,
			amount,
			office_id,
			create_by,
			create_name,
			create_date,
			remarks
		) VALUES (
			#{exchengId},
			#{stoExchangeGoodSave.detailId},
			#{changeGoods.goodsID},
			#{changeGoodsNum},
			#{stoExchangeGoodSave.goodsId},
			#{stoExchangeGoodSave.num},
			#{stoExchangeGoodSave.moneyAmount},
			#{office.id},
			#{createBy.id},
			#{createName},
			#{createDate},
			#{remarks}
		)
	</insert>
	
	<sql id="stoExchangeDetailColumns">
	   a.excheng_id AS "stoExchange.exchengId",
       min(a.change_goods_id) AS "exchange.changeGoods.goodsID",
       min(a.change_goods_num) AS "stoExchange.changeGoodsNum",
       sum(a.amount) AS "stoExchange.changeAmount",
       min(a.office_id) AS "stoExchange.office.id",
       min(a.create_by) AS "stoExchange.createBy.id",
       min(a.create_name) AS "stoExchange.createName",
       min(a.create_date) AS "stoExchange.createDate",
       min(a.remarks) AS "stoExchange.remarks",
       a1.detail_id AS "detail.detailId",
       a1.to_goods_id AS "detail.goodsId",
       a1.to_goods_num AS "detail.num",
       a1.amount AS "detail.moneyAmount"
	</sql>
	
	<!-- 查询出线路主表字段，保存到关联的Entity里 -->
	<resultMap id="StoExchangeResult" type="com.coffer.businesses.modules.store.v01.entity.StoExchange">
	    <id column="stoExchange.exchengId" property="exchengId" />
	    <result column="exchange.changeGoods.goodsID" property="changeGoods.goodsID"/>
	    <result column="stoExchange.changeGoodsNum" property="changeGoodsNum"/>
	    <result column="stoExchange.changeAmount" property="changeAmount"/>
	    <result column="stoExchange.office.id" property="office.id"/>
	    <result column="stoExchange.createBy.id" property="createBy.id"/>
 	    <result column="stoExchange.createName" property="createName"/>
	    <result column="stoExchange.createDate" property="createDate"/>
	    <result column="stoExchange.remarks" property="remarks"/>
	    <!--  线路详细信息 -->
	    <collection property="stoExchangeGoodList" ofType="com.coffer.businesses.modules.store.v01.entity.StoExchangeGood" fetchType="lazy"> 
	        <id column="detail.detailId" property="detailId"/>
	        <result column="detail.goodsId" property="goodsId"/>
	        <result column="detail.num" property="num"/>
	        <result column="detail.moneyAmount" property="moneyAmount"/>
	    </collection>
	</resultMap>
	
	<select id="getDetailById" resultMap="StoExchangeResult">
		SELECT 
			<include refid="stoExchangeDetailColumns"/>
		FROM sto_goods_exchange a,STO_GOODS_EXCHANGE a1
		WHERE a.excheng_id = a1.excheng_id
		and a.excheng_id = #{exchengId}
		GROUP BY a.excheng_id, a1.detail_id, a1.to_goods_id, a1.to_goods_num,a1.amount
		ORDER BY a1.detail_id
	</select>
</mapper>